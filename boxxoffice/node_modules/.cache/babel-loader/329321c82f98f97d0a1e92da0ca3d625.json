{"ast":null,"code":"import React from'react';import{Link}from'react-router-dom';import{Formik,Form}from'formik';import{TextField}from'./Textfield';import*as Yup from'yup';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Login=function Login(){var validate=Yup.object({email:Yup.string().email('Email is invalid').required('Email is required'),password:Yup.string().min(6,'Password must be at least 6 charaters').required('Password is required'),confirmPassword:Yup.string().oneOf([Yup.ref('password'),null],'Password must match').required('Confirm password is required')});return/*#__PURE__*/_jsx(Formik,{initialValues:{email:'',password:'',confirmPassword:''},validationSchema:validate,onSubmit:function onSubmit(values){// this will print the values on console\nwindow.alert(values);window.alert(\"you have successfully login\");},children:function children(Formik){return/*#__PURE__*/_jsxs(\"div\",{className:\"loginform\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"loginn my-4 font-weight-bold .display-4 text-center\",style:{color:\"red\"},children:\"Login\"}),/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsx(TextField,{label:\"Email\",name:\"email\",type:\"email\"}),/*#__PURE__*/_jsx(TextField,{label:\"password\",name:\"password\",type:\"password\"}),/*#__PURE__*/_jsx(TextField,{label:\"Confirm Password\",name:\"confirmPassword\",type:\"password\"}),/*#__PURE__*/_jsx(\"button\",{type:\"Submit\",className:\"registerbtn\",children:\"Login\"}),/*#__PURE__*/_jsx(Link,{to:\"/\",className:\"btn btn-dark mt-3\",children:\"Back\"})]})]});}});};export default Login;","map":{"version":3,"names":["React","Link","Formik","Form","TextField","Yup","Login","validate","object","email","string","required","password","min","confirmPassword","oneOf","ref","values","window","alert","color"],"sources":["D:/boXXoFFice/boxxoffice/src/component/Login.js"],"sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport { TextField } from './Textfield';\r\nimport * as Yup from 'yup';\r\n\r\n\r\nconst Login = () => {\r\n    const validate = Yup.object({\r\n        email: Yup.string()\r\n            .email('Email is invalid')\r\n            .required('Email is required'),\r\n        password: Yup.string()\r\n            .min(6, 'Password must be at least 6 charaters')\r\n            .required('Password is required'),\r\n        confirmPassword: Yup.string()\r\n            .oneOf([Yup.ref('password'), null], 'Password must match')\r\n            .required('Confirm password is required'),\r\n    })\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                email: '',\r\n                password: '',\r\n                confirmPassword: ''\r\n            }}\r\n            validationSchema={validate}\r\n            onSubmit={values => {\r\n                // this will print the values on console\r\n                window.alert(values)\r\n                window.alert(\"you have successfully login\")\r\n            }}\r\n        >\r\n            {Formik => (\r\n                <div className=\"loginform\">\r\n                    <h1 className=\"loginn my-4 font-weight-bold .display-4 text-center\" style={{\r\n                        color:\"red\",\r\n                    }}>Login</h1>\r\n                    <Form >\r\n                        <TextField label=\"Email\" name=\"email\" type=\"email\" />\r\n                        <TextField label=\"password\" name=\"password\" type=\"password\" />\r\n                        <TextField label=\"Confirm Password\" name=\"confirmPassword\" type=\"password\" />\r\n                        {/* login button */}\r\n                        <button type=\"Submit\" className=\"registerbtn\">Login</button>\r\n                        {/* back button */}\r\n                        <Link to=\"/\" className=\"btn btn-dark mt-3\">Back</Link>\r\n                    </Form>\r\n                </div>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\nexport default Login"],"mappings":"AAAA,MAAOA,MAAK,KAAM,OAAO,CACzB,OAASC,IAAI,KAAQ,kBAAkB,CACvC,OAASC,MAAM,CAAEC,IAAI,KAAQ,QAAQ,CACrC,OAASC,SAAS,KAAQ,aAAa,CACvC,MAAO,GAAKC,IAAG,KAAM,KAAK,CAAC,wFAG3B,GAAMC,MAAK,CAAG,QAARA,MAAK,EAAS,CAChB,GAAMC,SAAQ,CAAGF,GAAG,CAACG,MAAM,CAAC,CACxBC,KAAK,CAAEJ,GAAG,CAACK,MAAM,EAAE,CACdD,KAAK,CAAC,kBAAkB,CAAC,CACzBE,QAAQ,CAAC,mBAAmB,CAAC,CAClCC,QAAQ,CAAEP,GAAG,CAACK,MAAM,EAAE,CACjBG,GAAG,CAAC,CAAC,CAAE,uCAAuC,CAAC,CAC/CF,QAAQ,CAAC,sBAAsB,CAAC,CACrCG,eAAe,CAAET,GAAG,CAACK,MAAM,EAAE,CACxBK,KAAK,CAAC,CAACV,GAAG,CAACW,GAAG,CAAC,UAAU,CAAC,CAAE,IAAI,CAAC,CAAE,qBAAqB,CAAC,CACzDL,QAAQ,CAAC,8BAA8B,CAChD,CAAC,CAAC,CACF,mBACI,KAAC,MAAM,EACH,aAAa,CAAE,CACXF,KAAK,CAAE,EAAE,CACTG,QAAQ,CAAE,EAAE,CACZE,eAAe,CAAE,EACrB,CAAE,CACF,gBAAgB,CAAEP,QAAS,CAC3B,QAAQ,CAAE,kBAAAU,MAAM,CAAI,CAChB;AACAC,MAAM,CAACC,KAAK,CAACF,MAAM,CAAC,CACpBC,MAAM,CAACC,KAAK,CAAC,6BAA6B,CAAC,CAC/C,CAAE,UAED,kBAAAjB,MAAM,qBACH,aAAK,SAAS,CAAC,WAAW,wBACtB,WAAI,SAAS,CAAC,qDAAqD,CAAC,KAAK,CAAE,CACvEkB,KAAK,CAAC,KACV,CAAE,mBAAW,cACb,MAAC,IAAI,yBACD,KAAC,SAAS,EAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAG,cACrD,KAAC,SAAS,EAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAG,cAC9D,KAAC,SAAS,EAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,EAAG,cAE7E,eAAQ,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,mBAAe,cAE5D,KAAC,IAAI,EAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,mBAAmB,kBAAY,GACnD,GACL,EACT,EACI,CAEjB,CAAC,CACD,cAAed,MAAK"},"metadata":{},"sourceType":"module"}